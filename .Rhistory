stop("Las variables contienen datos faltantes")
}
if(missing(prueba)){
prueba="log-rank"
}
n_poblacion<-length(unique(poblacion))
p_base<-unique(sort(poblacion))[1]
p_second<-unique(sort(poblacion))[2]
data_surv<-data.frame(time=tiempo,fail=fallas,population=poblacion)
data_surv<-data_surv[order(data_surv$time),]
data_fail<-data_surv[data_surv$fail==1,]
time_fail<-sort(unique(data_fail$time))
data_surv_1<-data_surv[which(data_surv$population==p_base),]
data_surv_2<-data_surv[which(data_surv$population==p_second),]
data_surv_1<-data_surv_1[order(data_surv_1$time),]
data_surv_2<-data_surv_2[order(data_surv_2$time),]
if(prueba=="log-rank"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-d1[i]-e1[i]
o_e2[i]<-d2[i]-e2[i]
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
v1[i]<-(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),N=c(n1[1],n2[1]),Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Gehan's-Wilcoxon"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*(d1[i]-e1[i])
o_e2[i]<-n*(d2[i]-e2[i])
v1[i]<-(n^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-(n^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Prentice"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
KM<-c()
ti<-sort(unique(data_surv$time))
ni<-c()
fi<-c()
for(i in 1:length(ti)){
fi[i]<-NROW(data_surv[which(data_surv$time==ti[i]&data_surv$fail==1),])
ni[i]<-NROW(data_surv[which(data_surv$time>=ti[i]),])
KM[i]<-(NROW(data_surv)-sum(fi[which(ti<=ti[i])],na.rm = T))/NROW(data_surv)
}
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*KM[which(ti==time_fail[i])]*(d1[i]-e1[i])
o_e2[i]<-n*KM[which(ti==time_fail[i])]*(d2[i]-e2[i])
v1[i]<-((n*KM[which(ti==time_fail[i])])^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-((n*KM[which(ti==time_fail[i])])^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Harrington-Fleming"){
if(missing(kapp)){
bandera<-1
while(bandera==1){
kapp <- readline(prompt="Que valor utlizar para k: ")
kapp<-as.numeric(kapp)
if(is.numeric(kapp)){
if(kapp>0&&kapp<1){
bandera<-2
print(kapp)
}
}
else{bandera<-1}
}
}
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
KM<-c()
ti<-sort(unique(data_surv$time))
ni<-c()
fi<-c()
for(i in 1:length(ti)){
fi[i]<-NROW(data_surv[which(data_surv$time==ti[i]&data_surv$fail==1),])
ni[i]<-NROW(data_surv[which(data_surv$time>=ti[i]),])
KM[i]<-(NROW(data_surv)-sum(fi[which(ti<=ti[i])],na.rm = T))/NROW(data_surv)
}
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*(KM[which(ti==time_fail[i])]^kapp)*(d1[i]-e1[i])
o_e2[i]<-n*(KM[which(ti==time_fail[i])]^kapp)*(d2[i]-e2[i])
v1[i]<-((n*(KM[which(ti==time_fail[i])]^kapp))^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-((n*(KM[which(ti==time_fail[i])]^kapp))^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
return(resultado)
}
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="Harrington-Fleming")
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="Harrington-Fleming")
rm(list=ls())
library('KMsurv')
data(tongue)
# Pruebas:
# log-rank
# Gehan's-Wilcoxon
# Prentice
# Harrington-Fleming
comparacion<-function(tiempo,fallas,poblacion,prueba,kapp){
if(length(tiempo)!=length(fallas)){
stop("Las variables Tiempo y Fallas tienen diferente longitud")
}
if(length(tiempo)!=length(poblacion)){
stop("Las variables Tiempo y Poblacion tienen diferente longitud")
}
if(sum(is.na(tiempo))>0|sum(is.na(fallas))>0|sum(is.na(poblacion))>0){
stop("Las variables contienen datos faltantes")
}
if(missing(prueba)){
prueba="log-rank"
}
n_poblacion<-length(unique(poblacion))
p_base<-unique(sort(poblacion))[1]
p_second<-unique(sort(poblacion))[2]
data_surv<-data.frame(time=tiempo,fail=fallas,population=poblacion)
data_surv<-data_surv[order(data_surv$time),]
data_fail<-data_surv[data_surv$fail==1,]
time_fail<-sort(unique(data_fail$time))
data_surv_1<-data_surv[which(data_surv$population==p_base),]
data_surv_2<-data_surv[which(data_surv$population==p_second),]
data_surv_1<-data_surv_1[order(data_surv_1$time),]
data_surv_2<-data_surv_2[order(data_surv_2$time),]
if(prueba=="log-rank"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-d1[i]-e1[i]
o_e2[i]<-d2[i]-e2[i]
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
v1[i]<-(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),N=c(n1[1],n2[1]),Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Gehan's-Wilcoxon"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*(d1[i]-e1[i])
o_e2[i]<-n*(d2[i]-e2[i])
v1[i]<-(n^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-(n^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Prentice"){
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
KM<-c()
ti<-sort(unique(data_surv$time))
ni<-c()
fi<-c()
for(i in 1:length(ti)){
fi[i]<-NROW(data_surv[which(data_surv$time==ti[i]&data_surv$fail==1),])
ni[i]<-NROW(data_surv[which(data_surv$time>=ti[i]),])
KM[i]<-(NROW(data_surv)-sum(fi[which(ti<=ti[i])],na.rm = T))/NROW(data_surv)
}
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*KM[which(ti==time_fail[i])]*(d1[i]-e1[i])
o_e2[i]<-n*KM[which(ti==time_fail[i])]*(d2[i]-e2[i])
v1[i]<-((n*KM[which(ti==time_fail[i])])^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-((n*KM[which(ti==time_fail[i])])^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
if(prueba=="Harrington-Fleming"){
if(missing(kapp)){
bandera<-1
while(bandera==1){
kapp <- readline(prompt="Que valor utlizar para k: ")
kapp<-as.numeric(kapp)
if(!is.numeric(kapp)){
if(kapp>0&&kapp<1){
bandera<-2
print(kapp)
}
else{bandera<-1}
}
else{bandera<-1}
}
}
d1<-c()
d2<-c()
n1<-c()
n2<-c()
e1<-c()
e2<-c()
o_e1<-c()
o_e2<-c()
v1<-c()
v2<-c()
KM<-c()
ti<-sort(unique(data_surv$time))
ni<-c()
fi<-c()
for(i in 1:length(ti)){
fi[i]<-NROW(data_surv[which(data_surv$time==ti[i]&data_surv$fail==1),])
ni[i]<-NROW(data_surv[which(data_surv$time>=ti[i]),])
KM[i]<-(NROW(data_surv)-sum(fi[which(ti<=ti[i])],na.rm = T))/NROW(data_surv)
}
for(i in 1:length(time_fail)){
n1[i]<-NROW(data_surv_1[which(data_surv_1$time>=time_fail[i]),])
n2[i]<-NROW(data_surv_2[which(data_surv_2$time>=time_fail[i]),])
d1[i]<-NROW(data_surv_1[which(data_surv_1$time==time_fail[i]&data_surv_1$fail==1),])
d2[i]<-NROW(data_surv_1[which(data_surv_2$time==time_fail[i]&data_surv_2$fail==1),])
n<-n1[i]+n2[i]
d<-d1[i]+d2[i]
e1[i]<-(n1[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
e2[i]<-(n2[i]/(n1[i]+n2[i]))*(d1[i]+d2[i])
o_e1[i]<-n*(KM[which(ti==time_fail[i])]^kapp)*(d1[i]-e1[i])
o_e2[i]<-n*(KM[which(ti==time_fail[i])]^kapp)*(d2[i]-e2[i])
v1[i]<-((n*(KM[which(ti==time_fail[i])]^kapp))^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
v2[i]<-((n*(KM[which(ti==time_fail[i])]^kapp))^2)*(n1[i]*n2[i]*d*(n-d))/((n)^2*(n-1))
}
table_comp<-cbind(time_fail,d1,d2,n1,n2,e1,e2,o_e1,o_e2,v1,v2)
oe1<-sum(table_comp[,8])^2
oe2<-sum(table_comp[,9])^2
E1<-sum(table_comp[,6])
E2<-sum(table_comp[,7])
varoe1<-sum(table_comp[,10])
varoe2<-sum(table_comp[,11])
chistat1<-oe1/varoe1
chistat2<-oe2/varoe2
p_value1<-1-pchisq(chistat1,df=1)
p_value2<-1-pchisq(chistat2,df=1)
resultado<-data.frame(Niveles=unique(poblacion),
N=c(n1[1],n2[1]),
Fallas=c(sum(d1),sum(d2)),
Esperados=c(round(E1,2),round(E2,2)),
Xi_0=c(round(chistat1,3),round(chistat2,3)),
df=c(1,1),
p_value=c(round(p_value1,4),round(p_value2,4)))
}
return(resultado)
}
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="log-rank")
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="Gehan???s-Wilcoxon")
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="Prentice")
comparacion(tongue[,2],tongue[,3],tongue[,1],prueba="Harrington-Fleming")
install.packages("htmltools")
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("BH", "GGally", "Hmisc", "MCMCpack", "Matrix", "R6", "RcppEigen", "StanHeaders", "bbmle", "boot", "changepoint", "deSolve", "digest", "dygraphs", "evaluate", "formatR", "ggmcmc", "ggplot2", "gridExtra", "gtable", "htmlwidgets", "jsonlite", "kernlab", "knitr", "ks", "latticeExtra", "logspline", "lubridate", "memoise", "mgcv", "mnormt", "msm", "multicool", "munsell", "nleqslv", "nlme", "nnet", "plot3D", "rJava", "rgl", "rmarkdown", "rstan", "scales", "sfsmisc", "shiny", "shinyjs", "shinystan", "tidyr", "urca", "xtable"))
install.packages(c("Matrix", "boot", "mgcv"))
.libPaths()
list.files("/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
list.files("/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
as.vector(0.1)
as.vector(c(0.1,0.2))
length(as.vector(c(0.1,0.2)))
design_utility<-function(n_deltas,grid_res,n_exp,func,func_par,priorf,prior_par){
if(missing(n_deltas)){
n_deltas<-2
}
if(missing(grid_res)){
bandera<-1
while(bandera==1){
grid_res<-as.vector(readline(prompt="Asignar resolución a la rejilla: "))
if(length(grid_res)==(n_deltas-1)){
bandera=0
}
else{
bandera=1
print("El numero de variables independientes y la dimension de la rejilla
no concuerdan")
}
}
}
# Matriz de diseño
ds<-matrix(NA,ncol=2,nrow=n_deltas)
}
design_utility(3)
rm(list=ls)
rm(list=ls())
setwd("~/Documents/Git_Projects/Games-and-Quantal-Equilibrium")
getwd()
getwd()
